plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {

    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.officialMojangMappings()
    }

    java {
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}


publishMods {
    changelog = file("CHANGELOG.md").text.replace("@VERSION@", rootProject.mod_version)
    type = STABLE

    def optionsCurseforge = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
        minecraftVersions.add("1.20.1")
        projectId = "992333"
        requires {
            slug = "architectury-api"
        }
        optional {
            slug = "lets-do-farm-charm"
        }
    }

    def optionsModrinth = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_API_KEY")
        projectId = "FNi5IMiX"
        minecraftVersions.add("1.20.1")
        requires {
            slug = "architectury-api"
        }
        optional {
            slug = "lets-do-farm-charm"
        }
    }

    curseforge("curseforgeFabric") {
        from optionsCurseforge
        modLoaders.add("fabric")
        modLoaders.add("quilt")
        file = project(":fabric").tasks.named("remapJar").get().archiveFile
        displayName = "$mod_displayname ${rootProject.mod_version} Fabric"
        version = "${rootProject.mod_version}-fabric"
    }

    curseforge("curseforgeForge") {
        from optionsCurseforge
        modLoaders.add("forge")
        modLoaders.add("neoforge")
        file = project(":forge").tasks.named("remapJar").get().archiveFile
        displayName = "$mod_displayname ${rootProject.mod_version} Forge"
        version = "${rootProject.mod_version}-forge"
    }

    modrinth("modrinthFabric") {
        from optionsModrinth
        modLoaders.add("fabric")
        modLoaders.add("quilt")
        file = project(":fabric").tasks.named("remapJar").get().archiveFile
        displayName = "$mod_displayname ${rootProject.mod_version} Fabric"
        version = "${rootProject.mod_version}-fabric"

        additionalFiles.from(project(":fabric").tasks.named("remapSourcesJar").get().archiveFile)
    }

    modrinth("modrinthForge") {
        from optionsModrinth
        modLoaders.add("forge")
        modLoaders.add("neoforge")
        file = project(":forge").tasks.named("remapJar").get().archiveFile
        displayName = "$mod_displayname ${rootProject.mod_version} Forge"
        version = "${rootProject.mod_version}-forge"

        additionalFiles.from(project(":forge").tasks.named("remapSourcesJar").get().archiveFile)
    }
}